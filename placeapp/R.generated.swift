// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `btnRegister.png`.
    static let btnRegisterPng = FileResource(bundle: _R.hostingBundle, name: "btnRegister", pathExtension: "png")
    /// Resource file `btnSignin.png`.
    static let btnSigninPng = FileResource(bundle: _R.hostingBundle, name: "btnSignin", pathExtension: "png")
    /// Resource file `Default-568h@2x.png`.
    static let default568h2xPng = FileResource(bundle: _R.hostingBundle, name: "Default-568h@2x", pathExtension: "png")
    /// Resource file `DigitsKitResources.bundle`.
    static let digitsKitResourcesBundle = FileResource(bundle: _R.hostingBundle, name: "DigitsKitResources", pathExtension: "bundle")
    /// Resource file `live.mp4`.
    static let liveMp4 = FileResource(bundle: _R.hostingBundle, name: "live", pathExtension: "mp4")
    /// Resource file `Museo500-Regular.otf`.
    static let museo500RegularOtf = FileResource(bundle: _R.hostingBundle, name: "Museo500-Regular", pathExtension: "otf")
    /// Resource file `place.png`.
    static let placePng = FileResource(bundle: _R.hostingBundle, name: "place", pathExtension: "png")
    
    /// `bundle.URLForResource("btnRegister", withExtension: "png")`
    static func btnRegisterPng(_: Void) -> NSURL? {
      let fileResource = R.file.btnRegisterPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("btnSignin", withExtension: "png")`
    static func btnSigninPng(_: Void) -> NSURL? {
      let fileResource = R.file.btnSigninPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Default-568h@2x", withExtension: "png")`
    static func default568h2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.default568h2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("DigitsKitResources", withExtension: "bundle")`
    static func digitsKitResourcesBundle(_: Void) -> NSURL? {
      let fileResource = R.file.digitsKitResourcesBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("live", withExtension: "mp4")`
    static func liveMp4(_: Void) -> NSURL? {
      let fileResource = R.file.liveMp4
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Museo500-Regular", withExtension: "otf")`
    static func museo500RegularOtf(_: Void) -> NSURL? {
      let fileResource = R.file.museo500RegularOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("place", withExtension: "png")`
    static func placePng(_: Void) -> NSURL? {
      let fileResource = R.file.placePng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font {
    /// Font `Museo500-Regular`.
    static let museo500Regular = FontResource(fontName: "Museo500-Regular")
    
    /// `UIFont(name: "Museo500-Regular", size: ...)`
    static func museo500Regular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: museo500Regular, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `btnRegister`.
    static let btnRegister = ImageResource(bundle: _R.hostingBundle, name: "btnRegister")
    /// Image `btnSignin`.
    static let btnSignin = ImageResource(bundle: _R.hostingBundle, name: "btnSignin")
    /// Image `Default-568h`.
    static let default568h = ImageResource(bundle: _R.hostingBundle, name: "Default-568h")
    /// Image `img1`.
    static let img1 = ImageResource(bundle: _R.hostingBundle, name: "img1")
    /// Image `img2`.
    static let img2 = ImageResource(bundle: _R.hostingBundle, name: "img2")
    /// Image `img3`.
    static let img3 = ImageResource(bundle: _R.hostingBundle, name: "img3")
    /// Image `img4`.
    static let img4 = ImageResource(bundle: _R.hostingBundle, name: "img4")
    /// Image `img6`.
    static let img6 = ImageResource(bundle: _R.hostingBundle, name: "img6")
    /// Image `img7`.
    static let img7 = ImageResource(bundle: _R.hostingBundle, name: "img7")
    /// Image `img8`.
    static let img8 = ImageResource(bundle: _R.hostingBundle, name: "img8")
    /// Image `place`.
    static let place = ImageResource(bundle: _R.hostingBundle, name: "place")
    
    /// `UIImage(named: "btnRegister", bundle: ..., traitCollection: ...)`
    static func btnRegister(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btnRegister, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btnSignin", bundle: ..., traitCollection: ...)`
    static func btnSignin(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btnSignin, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Default-568h", bundle: ..., traitCollection: ...)`
    static func default568h(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.default568h, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img1", bundle: ..., traitCollection: ...)`
    static func img1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img2", bundle: ..., traitCollection: ...)`
    static func img2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img3", bundle: ..., traitCollection: ...)`
    static func img3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img4", bundle: ..., traitCollection: ...)`
    static func img4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img6", bundle: ..., traitCollection: ...)`
    static func img6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img7", bundle: ..., traitCollection: ...)`
    static func img7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "img8", bundle: ..., traitCollection: ...)`
    static func img8(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.img8, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "place", bundle: ..., traitCollection: ...)`
    static func place(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.place, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `jumpNumber`.
      static let jumpNumber: StoryboardSegueIdentifier<UIStoryboardSegue, LoginViewController, NumberViewController> = StoryboardSegueIdentifier(identifier: "jumpNumber")
      
      /// Optionally returns a typed version of segue `jumpNumber`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func jumpNumber(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, LoginViewController, NumberViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.jumpNumber, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `NumberViewController`, and contains static references to 1 segues.
    struct numberViewController {
      /// Segue identifier `jumpToTest`.
      static let jumpToTest: StoryboardSegueIdentifier<UIStoryboardSegue, NumberViewController, ContactsViewController> = StoryboardSegueIdentifier(identifier: "jumpToTest")
      
      /// Optionally returns a typed version of segue `jumpToTest`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func jumpToTest(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, NumberViewController, ContactsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.numberViewController.jumpToTest, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `jumpRegister`.
      static let jumpRegister: StoryboardSegueIdentifier<UIStoryboardSegue, ViewController, LoginViewController> = StoryboardSegueIdentifier(identifier: "jumpRegister")
      
      /// Optionally returns a typed version of segue `jumpRegister`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func jumpRegister(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ViewController, LoginViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.jumpRegister, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "com.tuejecafetero.placeapp") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      let testViewController = StoryboardViewControllerResource<TestViewController>(identifier: "TestViewController")
      
      func testViewController(_: Void) -> TestViewController? {
        return UIStoryboard(resource: self).instantiateViewController(testViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "img2") == nil { throw ValidationError(description: "[R.swift] Image named 'img2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "place.png") == nil { throw ValidationError(description: "[R.swift] Image named 'place.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btnRegister.png") == nil { throw ValidationError(description: "[R.swift] Image named 'btnRegister.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().testViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'testViewController' could not be loaded from storyboard 'Main' as 'TestViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}